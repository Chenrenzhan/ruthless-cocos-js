// Generated by CoffeeScript 1.10.0

/*
  游戏页面
 */

(function() {
  this.PlayGameScene = BaseLayer.extend({
    stMainBg: null,
    btnBack: null,
    stStar: null,
    lbResultNumber: null,
    lbHighestRecord: null,
    score: null,
    punish: null,
    time: null,
    lbFirst: null,
    lbSecond: null,
    mode: null,
    numberSprites: null,
    resultNumber: null,
    firstSelectedNumber: null,
    countNumber: 0,
    ctor: function(_type) {
      this._super();
      this.mode = _type;
      this.initMainBg();
      this.initBackArrows();
      this.initStar();
      this.initScore();
      return this.initMovingNumber();
    },
    initMainBg: function() {
      this.stMainBg = new cc.Sprite(res.igGameBg);
      this.stMainBg.attr({
        x: THIS.winSize.width / 2,
        y: THIS.winSize.height / 2
      });
      return this.addChild(this.stMainBg, 0);
    },
    initBackArrows: function() {
      var self;
      this.btnBack = new ccui.Button();
      this.btnBack.loadTextureNormal(res.igBtnBackArrows, ccui.Widget.LOCAL_TEXTURE);
      this.btnBack.setPressedActionEnabled(true);
      this.btnBack.setTouchEnabled(true);
      this.btnBack.attr({
        x: this.btnBack.width / 2 + 20,
        y: THIS.winSize.height - this.btnBack.height / 2 - 20
      });
      this.addChild(this.btnBack, 15);
      self = this;
      return this.btnBack.addTouchEventListener(function(touch, event) {
        var backDialog;
        if (event === ccui.Widget.TOUCH_ENDED) {
          LogTool.c("返回");
          self.pauseNumbers(self);
          backDialog = new BackConfirmDialog();
          backDialog.funOk = function() {
            LogTool.c("click dialog ok button");
            return self.stopNumbers(self);
          };
          backDialog.funCancel = function() {
            LogTool.c("click dialog cancel button");
            return self.resumeNumbers(self);
          };
          return self.addChild(backDialog, 20);
        }
      }, this.btnBack);
    },
    initStar: function() {
      this.stStar = new cc.Sprite(res.igStar);
      this.stStar.attr({
        x: THIS.winSize.width / 2,
        y: THIS.winSize.height - this.stStar.height / 2 - 30
      });
      this.lbResultNumber = cc.LabelTTF.createWithFontDefinition();
      this.lbResultNumber.fontSize = 60;
      this.lbResultNumber.fillStyle = cc.color(255, 0, 0, 255);
      this.lbResultNumber.string = "25";
      this.lbResultNumber.attr({
        x: this.stStar.width / 2,
        y: this.stStar.height / 2
      });
      this.stStar.addChild(this.lbResultNumber, 0);
      return this.addChild(this.stStar, 20);
    },
    initHighestRecord: function() {
      var label;
      label = new cc.LabelTTF("最高纪录：");
      label.fillStyle = cc.color(79, 79, 79, 255);
      label.fontSize = 35;
      label.attr({
        x: THIS.winSize.width - 300,
        y: THIS.winSize.height - label.height / 2 - 30
      });
      this.addChild(label, 0);
      this.lbHighestRecord = new cc.LabelTTF();
      this.lbHighestRecord.fillStyle = cc.color(20, 20, 20, 255);
      this.lbHighestRecord.fontSize = 35;
      this.lbHighestRecord.string = "" + THIS.highestRecord;
      this.lbHighestRecord.attr({
        x: label.x + label.width / 2 + 10,
        y: label.y
      });
      return this.addChild(this.lbHighestRecord, 0);
    },
    initScore: function() {
      var stFirst, stSecond;
      stFirst = new cc.Sprite(res.igScoreFrame);
      stFirst.attr({
        x: THIS.winSize.width - stFirst.width / 2 - 50,
        y: THIS.winSize.height - stFirst.height / 2 - 10
      });
      this.addChild(stFirst, 20);
      this.lbFirst = new cc.LabelTTF();
      this.lbFirst.fontSize = 40;
      this.lbFirst.fillStyle = cc.color(20, 20, 20, 255);
      this.lbFirst.setDimensions(0, 0);
      this.lbFirst.string = 144;
      this.lbFirst.attr({
        x: stFirst.width / 2,
        y: stFirst.height / 2
      });
      stFirst.addChild(this.lbFirst, 0);
      stSecond = new cc.Sprite(res.igScoreFrame);
      stSecond.attr({
        x: stFirst.x,
        y: stFirst.y - stFirst.height / 2 - 5
      });
      this.addChild(stSecond, 20);
      this.lbSecond = new cc.LabelTTF();
      this.lbSecond.fontSize = 40;
      this.lbSecond.fillStyle = cc.color(79, 79, 79, 255);
      this.lbSecond.setDimensions(0, 0);
      this.lbSecond.string = "03:00";
      this.lbSecond.attr({
        x: stSecond.width / 2,
        y: stSecond.height / 2
      });
      return stSecond.addChild(this.lbSecond, 0);
    },
    initMovingNumber: function() {
      var i, j, results;
      this.numberSprites = new Array();
      results = [];
      for (i = j = 0; j <= 5; i = ++j) {
        results.push(this.scheduleOnce(function() {
          return this.numberSprites.push(this.generateNumber());
        }, Math.random() * 5));
      }
      return results;
    },
    generateNumber: function() {
      var number, numberSprite, self;
      self = this;
      number = Math.round(Math.random() * 100);
      numberSprite = new MovingNumber(0.1, number);
      self.countNumber++;
      if (self.countNumber === THIS.numberCount) {
        self.countNumber = 0;
        numberSprite.finishCallback = function() {
          return self.numberFallFinish(self);
        };
      }
      this.addChild(numberSprite, 5);
      cc.eventManager.addListener(numberSprite.listener(function() {
        return function(nu) {
          return LogTool.c("click number = " + nu);
        };
      }), numberSprite);
      numberSprite.startAction(function() {
        return LogTool.c("start action");
      });
      return numberSprite;
    },
    pauseNumbers: function(self) {
      var j, len, number, ref, results;
      this.pause();
      if (self.numberSprites !== null) {
        ref = self.numberSprites;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          number = ref[j];
          results.push(number.pauseAction());
        }
        return results;
      }
    },
    resumeNumbers: function(self) {
      var j, len, number, ref, results;
      this.resume();
      if (self.numberSprites !== null) {
        ref = self.numberSprites;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          number = ref[j];
          results.push(number.resumeAction());
        }
        return results;
      }
    },
    stopNumbers: function(self) {
      var j, len, number, ref, results;
      this.cleanup();
      if (self.numberSprites !== null) {
        ref = self.numberSprites;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          number = ref[j];
          results.push(number.cleanup());
        }
        return results;
      }
    },
    nextGame: function(self) {
      var j, len, number, ref;
      if (self.numberSprites !== null) {
        ref = self.numberSprites;
        for (j = 0, len = ref.length; j < len; j++) {
          number = ref[j];
          number.removeFromParent(true);
        }
      }
      return self.initMovingNumber();
    },
    numberFallFinish: function(self) {
      self.nextGame(self);
      return self.countNumber = 0;
    }
  });

}).call(this);

//# sourceMappingURL=PlayGameScene.js.map
