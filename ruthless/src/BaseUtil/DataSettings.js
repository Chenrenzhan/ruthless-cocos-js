// Generated by CoffeeScript 1.10.0

/*
  数据持久化存储到本地
 */

(function() {
  cc.loader.loadJson(res.setting, function(err, json) {
    var arcade, challenge, classics, difficult, error, error1, error2, error3, state;
    if (err) {
      return LogTool.c(err);
    } else {
      THIS.designWinSize = new cc.p(json.designWinSize.width, json.designWinSize.height);
      THIS.resolutionPolicy = cc.ResolutionPolicy.SHOW_ALL;
      THIS.winSize = cc.winSize;
      LogTool.c("cc.winSize   " + cc.winSize.width + "  " + cc.winSize.height);
      THIS.loadResourceDelay = json.loadResourceDelay;
      THIS.loadFinishDelay = json.loadFinishDelay;
      THIS.nextDialogDelay = json.nextDialogDelay;
      THIS.isCloseDialogOutside = json.isCloseDialogOutside;
      THIS.countDown = json.countDown;
      THIS.difficultScope = json.difficultScope;
      THIS.maxError = json.maxError;
      THIS.isRotation = json.isRotation;
      THIS.rotationTime = json.rotationTime;
      THIS.numberCount = json.numberCount;
      THIS.accelerometer = json.accelerometer;
      THIS.randomFall = json.randomFall;
      try {
        if (!THIS.isEmpty(state = THIS.LS.getItem(THIS.MUSIC_STATE))) {
          THIS.musicState = eval(state);
        }
      } catch (error1) {
        error = error1;
        LogTool.c(error);
        THIS.musicState = json.musicState;
      }
      try {
        if (!THIS.isEmpty(difficult = THIS.LS.getItem(THIS.GAME_DIFFICULT))) {
          THIS.gameDifficult = parseInt(difficult);
        }
      } catch (error2) {
        error = error2;
        LogTool.c(error);
        THIS.gameDifficult = json.gameDifficult;
      }
      try {
        if (!THIS.isEmpty(classics = THIS.LS.getItem(THIS.HIGH_CLASSIC))) {
          THIS.highestRecord.classics = parseInt(classics);
        }
        if (!THIS.isEmpty(challenge = THIS.LS.getItem(THIS.HIGH_CHALLENGE))) {
          THIS.highestRecord.challenge = parseInt(challenge);
        }
        if (!THIS.isEmpty(arcade = THIS.LS.getItem(THIS.HIGH_ARCADE))) {
          return THIS.highestRecord.arcade = parseInt(arcade);
        }
      } catch (error3) {
        error = error3;
        LogTool.c(error);
        return THIS.highestRecord = json.highestRecord;
      }
    }
  });

}).call(this);

//# sourceMappingURL=DataSettings.js.map
