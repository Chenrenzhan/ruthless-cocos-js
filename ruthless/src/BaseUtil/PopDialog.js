// Generated by CoffeeScript 1.10.0
(function() {
  this.PopDialog = cc.Layer.extend({
    listener: null,
    tcLayer: null,
    blackLayer: null,
    flag: false,
    touchbg_flag: false,
    isShow: true,
    hiddenCallback: null,
    ctor: function(layer, isShow, touchbg_flag) {
      this._super();
      this.setLocalZOrder(10000);
      if (typeof touchbg_flag !== 'undefined') {
        this.touchbg_flag = touchbg_flag;
      }
      if (typeof isShow !== "undefined") {
        this.isShow = isShow;
      }
      this.visible = this.isShow;
      this.tcLayer = layer;
      layer.setLocalZOrder(9999);
      this.addChild(layer);
      return this.initBlackLayer();
    },
    initBlackLayer: function() {
      this.blackLayer = new cc.LayerColor(cc.color(0, 0, 0, 120));
      if (this.isShow) {
        this.show();
      }
      return this.addChild(this.blackLayer);
    },
    addListener: function() {
      var self;
      self = this;
      this.listener = cc.EventListener.create({
        event: cc.EventListener.TOUCH_ONE_BY_ONE,
        swallowTouches: true,
        onTouchBegan: function(touch, event) {
          var h, tx, ty, w, x, y;
          if (self.touchbg_flag) {
            x = self.tcLayer.x;
            y = self.tcLayer.y;
            w = self.tcLayer.width;
            h = self.tcLayer.height;
            tx = parseInt(touch.getLocation().x);
            ty = parseInt(touch.getLocation().y);
            if (!(tx >= x && tx <= x + w && ty >= y && ty <= y + h)) {
              self.flag = true;
              self.hidden(self.hiddenCallback);
              return false;
            }
          }
          return true;
        },
        onTouchEnded: function(touch, event) {
          if (self.touchbg_flag && self.flag) {
            self.deleteListener();
            return self.flag = false;
          }
        }
      });
      return cc.eventManager.addListener(this.listener, this.blackLayer);
    },
    deleteListener: function() {
      return cc.eventManager.removeListener(this.listener);
    },
    show: function(fun) {
      var fadeIn, func, scaleTo, self, seq;
      self = this;
      this.visible = true;
      fadeIn = new cc.FadeTo(0.2, 120);
      this.blackLayer.runAction(fadeIn);
      this.tcLayer.scale = 0;
      scaleTo = new cc.ScaleTo(0.4, 1).easing(cc.easeElasticOut(0.7));
      func = new cc.CallFunc(function(e) {
        if (typeof fun !== "undefined") {
          return fun();
        }
      });
      seq = new cc.Sequence(scaleTo, func);
      this.tcLayer.runAction(seq);
      return this.addListener();
    },
    hidden: function(fun) {
      var fadeOut, func, scaleTo, self, seq;
      self = this;
      scaleTo = new cc.ScaleTo(0.4, 0).easing(cc.easeElasticOut(0.7));
      func = new cc.CallFunc(function(e) {
        var error, error1;
        self.deleteListener();
        self.visible = false;
        try {
          if (typeof fun === "function") {
            return fun();
          } else {
            return LogTool.c("fun is not a function");
          }
        } catch (error1) {
          error = error1;
          return LogTool.c(error);
        }
      });
      seq = new cc.Sequence(scaleTo, func);
      this.tcLayer.runAction(seq);
      fadeOut = new cc.FadeOut(0.2);
      return this.blackLayer.runAction(fadeOut);
    }
  });

}).call(this);

//# sourceMappingURL=PopDialog.js.map
