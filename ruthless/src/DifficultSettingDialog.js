// Generated by CoffeeScript 1.10.0

/*
  游戏难度设置对话框
 */

(function() {
  this.DifficultSettingDialog = Dialog.extend({
    lowNormal: null,
    lowSelected: null,
    middleNormal: null,
    middleSelected: null,
    highNormal: null,
    highSelected: null,
    low: null,
    middle: null,
    high: null,
    ctor: function() {
      this._super();
      this.initSprite();
      this.initLow();
      this.initMiddle();
      this.initHigh();
      return this.selectDifficult(THIS.gameDifficult);
    },
    initSprite: function() {
      this.lowNormal = new cc.Sprite(res.igLowNormal);
      this.lowSelected = new cc.Sprite(res.igLowSelected);
      this.middleNormal = new cc.Sprite(res.igMiddleNormal);
      this.middleSelected = new cc.Sprite(res.igMiddleSelected);
      this.highNormal = new cc.Sprite(res.igHighNormal);
      return this.highSelected = new cc.Sprite(res.igHighSelected);
    },
    initLow: function() {
      this.low = cc.MenuItemSprite.create(this.lowNormal, this.lowSelected);
      this.low.attr({
        x: this.dialogLayer.width / 2,
        y: this.dialogLayer.height / 4 * 3
      });
      this.low.setEnabled(true);
      this.dialogLayer.addChild(this.low, 5);
      this.low.setTag(THIS.difficult.low);
      return cc.eventManager.addListener(this.listener().clone(), this.low);
    },
    initMiddle: function() {
      this.middle = cc.MenuItemSprite.create(this.middleNormal, this.middleSelected);
      this.middle.attr({
        x: this.dialogLayer.width / 2,
        y: this.dialogLayer.height / 4 * 2
      });
      this.middle.setEnabled(true);
      this.dialogLayer.addChild(this.middle, 5);
      this.middle.setTag(THIS.difficult.middle);
      return cc.eventManager.addListener(this.listener().clone(), this.middle);
    },
    initHigh: function() {
      this.high = cc.MenuItemSprite.create(this.highNormal, this.highSelected);
      this.high.attr({
        x: this.dialogLayer.width / 2,
        y: this.dialogLayer.height / 4
      });
      this.high.setEnabled(true);
      this.dialogLayer.addChild(this.high, 5);
      this.high.setTag(THIS.difficult.high);
      return cc.eventManager.addListener(this.listener().clone(), this.high);
    },
    selectDifficult: function(difficult) {
      switch (difficult) {
        case THIS.difficult.low:
          return this.selectLow();
        case THIS.difficult.middle:
          return this.selectMiddle();
        case THIS.difficult.high:
          return this.selectHigh();
      }
    },
    selectLow: function() {
      THIS.gameDifficult = THIS.difficult.low;
      if (this.low != null) {
        this.low.selected();
      }
      if (this.middle != null) {
        this.middle.unselected();
      }
      if (this.high != null) {
        return this.high.unselected();
      }
    },
    selectMiddle: function() {
      THIS.gameDifficult = THIS.difficult.middle;
      if (this.low != null) {
        this.low.unselected();
      }
      if (this.middle != null) {
        this.middle.selected();
      }
      if (this.high != null) {
        return this.high.unselected();
      }
    },
    selectHigh: function() {
      THIS.gameDifficult = THIS.difficult.high;
      if (this.low != null) {
        this.low.unselected();
      }
      if (this.middle != null) {
        this.middle.unselected();
      }
      if (this.high != null) {
        return this.high.selected();
      }
    },
    listener: function() {
      var self;
      self = this;
      return cc.EventListener.create({
        event: cc.EventListener.TOUCH_ONE_BY_ONE,
        swallowTouches: true,
        onTouchBegan: function(touch, event) {
          var locationInNode, rect, s, target;
          target = event.getCurrentTarget();
          locationInNode = target.convertToNodeSpace(touch.getLocation());
          s = target.getContentSize();
          rect = cc.rect(0, 0, s.width, s.height);
          if (cc.rectContainsPoint(rect, locationInNode)) {
            return true;
          }
          return false;
        },
        onTouchEnded: function(touch, event) {
          var target;
          target = event.getCurrentTarget();
          return self.selectDifficult(target.getTag());
        }
      });
    }
  });

}).call(this);

//# sourceMappingURL=DifficultSettingDialog.js.map
