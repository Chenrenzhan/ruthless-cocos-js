// Generated by CoffeeScript 1.10.0

/*
  移动飘落的数字
 */

(function() {
  this.MovingNumber = cc.Sprite.extend({
    parent: null,
    speed: null,
    number: null,
    lbNumber: null,
    rotationAngle: null,
    moveAction: null,
    rotateAction: null,
    finishCallback: null,
    ctor: function(_speed, _number) {
      this._super();
      this.speed = _speed;
      this.number = _number;
      this.rotationAngle = this.getRotateAngle();
      this.scheduleUpdate();
      return this.initSprite();
    },
    initSprite: function() {
      var offsetSide, offsetX, px, randomX;
      this.initWithFile(res.igNumberBg);
      offsetSide = this.width > this.height ? this.width : this.height;
      px = this.getRandomX();
      if (px < offsetSide) {
        px = offsetSide;
      } else if (px > THIS.winSize.width - offsetSide) {
        px = THIS.winSize.width - offsetSide;
      }
      this.attr({
        x: px,
        y: THIS.winSize.height + offsetSide / 2
      });
      this.setRotation(this.rotationAngle);
      this.lbNumber = new cc.LabelTTF("" + this.number);
      this.lbNumber.fontSize = 50;
      this.lbNumber.fillStyle = cc.color(34, 34, 34, 255);
      this.lbNumber.setRotation(-this.rotationAngle);
      this.lbNumber.attr({
        x: this.width / 2 - 20,
        y: this.height / 2 - 10
      });
      this.addChild(this.lbNumber, 0);
      offsetX = 0;
      randomX = this.getRandomX();
      if (randomX < offsetSide) {
        offsetX = offsetSide - this.x;
      } else if (randomX > THIS.winSize.width - offsetSide) {
        offsetX = THIS.winSize.width - offsetSide - this.x;
      }
      this.moveAction = cc.moveBy(1, cc.p(offsetX, -(THIS.winSize.height + offsetSide * 2))).speed(this.speed).easing(cc.easeIn(1.0));
      return this.rotateAction = cc.rotateBy(THIS.rotationTime, 360, 360).repeatForever();
    },
    getRandomX: function() {
      return Math.random() * (THIS.winSize.width - 40) + 20;
    },
    getRotateAngle: function() {
      return Math.random() * 360;
    },
    startAction: function(fun) {
      var error, error1;
      try {
        if (typeof fun === "function") {
          fun();
        }
      } catch (error1) {
        error = error1;
        LogTool.c("fun is not a function");
      }
      this.runAction(this.moveAction);
      if (THIS.isRotation) {
        return this.runAction(this.rotateAction);
      }
    },
    pauseAction: function(fun) {
      var error, error1;
      this.pause();
      try {
        if (typeof fun === "function") {
          return fun();
        }
      } catch (error1) {
        error = error1;
        return LogTool.c("fun is not a function");
      }
    },
    resumeAction: function(fun) {
      var error, error1;
      this.resume();
      try {
        if (typeof fun === "function") {
          return fun();
        }
      } catch (error1) {
        error = error1;
        return LogTool.c("fun is not a function");
      }
    },
    stopAction: function(fun) {
      var error, error1;
      this.stopAllActons();
      try {
        if (typeof fun === "function") {
          return fun();
        }
      } catch (error1) {
        error = error1;
        return LogTool.c("fun is not a function");
      }
    },
    listener: function(fun) {
      var self;
      self = this;
      return cc.EventListener.create({
        event: cc.EventListener.TOUCH_ONE_BY_ONE,
        swallowTouches: true,
        onTouchBegan: function(touch, event) {
          var locationInNode, rect, s, target;
          target = event.getCurrentTarget();
          locationInNode = target.convertToNodeSpace(touch.getLocation());
          s = target.getContentSize();
          rect = cc.rect(0, 0, s.width, s.height);
          if (cc.rectContainsPoint(rect, locationInNode)) {
            return true;
          }
          return false;
        },
        onTouchEnded: function(touch, event) {
          var error, error1;
          self.lbNumber.fillStyle = THIS.selectedNumberColor;
          self.lbNumber.setString(" ");
          self.lbNumber.setString("" + self.number);
          try {
            if (typeof fun === "function" && typeof fun() === "function") {
              return fun()(self.number);
            } else {
              return LogTool.c("fun is not a function");
            }
          } catch (error1) {
            error = error1;
            return LogTool.e(error);
          }
        }
      });
    },
    update: function(dt) {
      var error, error1;
      if (this.y < -(this.height / 2 * 3)) {
        this.cleanup();
        LogTool.c(this.lbNumber.string);
        try {
          if (typeof this.finishCallback === "function") {
            return this.finishCallback();
          }
        } catch (error1) {
          error = error1;
          return LogTool.e(error);
        }
      }
    }
  });

}).call(this);

//# sourceMappingURL=MovingNumber.js.map
