// Generated by CoffeeScript 1.10.0

/*
  音乐设置对话框
 */

(function() {
  this.MusicSettingDialog = Dialog.extend({
    openNormal: null,
    openSelected: null,
    closeNormal: null,
    closeSelected: null,
    open: null,
    close: null,
    type: {
      open: 0,
      close: 1
    },
    ctor: function() {
      this._super();
      this.initSprite();
      this.initOpen();
      return this.initClose();
    },
    initSprite: function() {
      this.openNormal = new cc.Sprite(res.igMusicOpenNormal);
      this.openSelected = new cc.Sprite(res.igMusicOpenSelected);
      this.closeNormal = new cc.Sprite(res.igMusicCloseNormal);
      return this.closeSelected = new cc.Sprite(res.igMusicCloseSelected);
    },
    initOpen: function() {
      this.open = cc.MenuItemSprite.create(this.openNormal, this.openSelected);
      this.open.attr({
        x: this.dialogLayer.width / 2,
        y: this.dialogLayer.height / 2 + this.open.height / 2 + 25
      });
      this.open.setEnabled(true);
      if (THIS.musicState) {
        this.selectOpen();
      } else {
        this.selectClose();
      }
      this.dialogLayer.addChild(this.open, 5);
      this.open.setTag(this.type.open);
      return cc.eventManager.addListener(this.listener().clone(), this.open);
    },
    initClose: function() {
      this.close = cc.MenuItemSprite.create(this.closeNormal, this.closeSelected);
      this.close.attr({
        x: this.dialogLayer.width / 2,
        y: this.dialogLayer.height / 2 - this.close.height / 2 - 25
      });
      this.close.setEnabled(true);
      if (THIS.musicState) {
        this.selectOpen();
      } else {
        this.selectClose();
      }
      this.dialogLayer.addChild(this.close, 5);
      this.close.setTag(this.type.close);
      return cc.eventManager.addListener(this.listener().clone(), this.close);
    },
    selectOpen: function() {
      THIS.musicState = true;
      if (this.open != null) {
        this.open.selected();
      }
      if (this.close != null) {
        return this.close.unselected();
      }
    },
    selectClose: function() {
      THIS.musicState = false;
      if (this.open != null) {
        this.open.unselected();
      }
      if (this.close != null) {
        return this.close.selected();
      }
    },
    listener: function() {
      var self;
      self = this;
      return cc.EventListener.create({
        event: cc.EventListener.TOUCH_ONE_BY_ONE,
        swallowTouches: true,
        onTouchBegan: function(touch, event) {
          var locationInNode, rect, s, target;
          target = event.getCurrentTarget();
          locationInNode = target.convertToNodeSpace(touch.getLocation());
          s = target.getContentSize();
          rect = cc.rect(0, 0, s.width, s.height);
          if (cc.rectContainsPoint(rect, locationInNode)) {
            return true;
          }
          return false;
        },
        onTouchEnded: function(touch, event) {
          var target;
          target = event.getCurrentTarget();
          if (target.getTag() === self.type.open) {
            return self.selectOpen();
          } else if (target.getTag() === self.type.close) {
            return self.selectClose();
          }
        }
      });
    }
  });

}).call(this);

//# sourceMappingURL=MusicSettingDialog.js.map
